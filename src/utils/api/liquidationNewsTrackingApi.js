import fetchApi from "./fetchApi";

const mainRoute = "/liquidation_news_tracking";

const liquidationNewsTrackingApi = {
  // Crear registro de trazabilidad
  create: async (trackingData) => {
    try {
      console.log("ðŸ”„ Creando registro de trazabilidad...");
      console.log("ðŸ“Š Datos:", trackingData);
      
      const response = await fetchApi.post(mainRoute, trackingData);
      
      console.log("âœ… Registro de trazabilidad creado");
      return response.data;
    } catch (error) {
      console.error("Error al crear registro de trazabilidad", error);
      throw error;
    }
  },

  // Obtener trazabilidad por liquidaciÃ³n
  getByLiquidationId: async (liquidationId) => {
    try {
      console.log("ðŸ”„ Obteniendo trazabilidad por liquidaciÃ³n ID:", liquidationId);
      
      const response = await fetchApi.get(`${mainRoute}/by-liquidation/${liquidationId}`);
      
      console.log("ðŸ“Š Trazabilidad obtenida:", response.data);
      return response.data.body || response.data || [];
    } catch (error) {
      console.error("Error al obtener trazabilidad por liquidaciÃ³n", error);
      throw error;
    }
  },

  // Obtener trazabilidad por novedad de empleado
  getByEmployeeNewsId: async (employeeNewsId) => {
    try {
      console.log("ðŸ”„ Obteniendo trazabilidad por novedad de empleado ID:", employeeNewsId);
      
      const response = await fetchApi.get(`${mainRoute}/by-employee-news/${employeeNewsId}`);
      
      console.log("ðŸ“Š Trazabilidad obtenida:", response.data);
      return response.data.body || response.data || [];
    } catch (error) {
      console.error("Error al obtener trazabilidad por novedad de empleado", error);
      throw error;
    }
  },

  // Obtener estadÃ­sticas de trazabilidad
  getStats: async (companyId = null, startDate = null, endDate = null) => {
    try {
      console.log("ðŸ”„ Obteniendo estadÃ­sticas de trazabilidad...");
      console.log("ðŸ“Š ParÃ¡metros:", { companyId, startDate, endDate });
      
      let url = `${mainRoute}/stats`;
      const params = new URLSearchParams();
      
      if (companyId) params.append('companyId', companyId);
      if (startDate) params.append('startDate', startDate);
      if (endDate) params.append('endDate', endDate);
      
      if (params.toString()) {
        url += `?${params.toString()}`;
      }
      
      const response = await fetchApi.get(url);
      
      console.log("ðŸ“Š EstadÃ­sticas obtenidas:", response.data);
      return response.data.body || response.data || [];
    } catch (error) {
      console.error("Error al obtener estadÃ­sticas de trazabilidad", error);
      throw error;
    }
  },

  // Obtener novedades incluidas en una liquidaciÃ³n
  getIncludedNews: async (liquidationId) => {
    try {
      console.log("ðŸ”„ Obteniendo novedades incluidas en liquidaciÃ³n:", liquidationId);
      
      const response = await fetchApi.get(`${mainRoute}/included/${liquidationId}`);
      
      console.log("ðŸ“Š Novedades incluidas obtenidas:", response.data);
      return response.data.body || response.data || [];
    } catch (error) {
      console.error("Error al obtener novedades incluidas", error);
      throw error;
    }
  },

  // Obtener novedades excluidas de una liquidaciÃ³n
  getExcludedNews: async (liquidationId) => {
    try {
      console.log("ðŸ”„ Obteniendo novedades excluidas de liquidaciÃ³n:", liquidationId);
      
      const response = await fetchApi.get(`${mainRoute}/excluded/${liquidationId}`);
      
      console.log("ðŸ“Š Novedades excluidas obtenidas:", response.data);
      return response.data.body || response.data || [];
    } catch (error) {
      console.error("Error al obtener novedades excluidas", error);
      throw error;
    }
  },

  // Actualizar estado de trazabilidad
  updateStatus: async (id, status, notes = null) => {
    try {
      console.log("ðŸ”„ Actualizando estado de trazabilidad ID:", id);
      console.log("ðŸ“Š Nuevo estado:", status);
      
      const response = await fetchApi.put(`${mainRoute}/${id}/status`, {
        status,
        notes
      });
      
      console.log("âœ… Estado de trazabilidad actualizado");
      return response.data;
    } catch (error) {
      console.error("Error al actualizar estado de trazabilidad", error);
      throw error;
    }
  },

  // Eliminar trazabilidad por liquidaciÃ³n
  deleteByLiquidationId: async (liquidationId) => {
    try {
      console.log("ðŸ”„ Eliminando trazabilidad por liquidaciÃ³n ID:", liquidationId);
      
      const response = await fetchApi.delete(`${mainRoute}/by-liquidation/${liquidationId}`);
      
      console.log("âœ… Trazabilidad eliminada");
      return response.data;
    } catch (error) {
      console.error("Error al eliminar trazabilidad por liquidaciÃ³n", error);
      throw error;
    }
  },
};

export default liquidationNewsTrackingApi;
